/* automatically generated by rust-bindgen 0.54.1

See instructions from: https://rust-lang.github.io/rust-bindgen/print.html
  Download LLVM from: https://releases.llvm.org/download.html
  ADD LIBCLANG_PATH to environment

  bindgen.exe `
   .\include\hax_interface.h `
   -o platform\crosvm\hypervisor\src\haxm\haxm_sys\bindings.rs `
   --with-derive-default `
   -- -DHAX_TESTS=1

  The HAX_TESTS macro definition prevents the inlude file from including
  anything that's only needed by the kernel.

  I also had to remove some align tags for structs that live within packed
  structs, there's a bindgen bug for this:
  https://github.com/rust-lang/rust-bindgen/issues/1538

  I removed the align from:
    - interruptibility_state_t__bindgen_ty_1
    - segment_desc_t__bindgen_ty_1__bindgen_ty_1

    Suppress warnings from unaligned_references and deref_nullptr
*/
#![allow(unaligned_references, deref_nullptr)]
#![allow(clippy::undocumented_unsafe_blocks)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const HAX_PAGE_SIZE: u32 = 4096;
pub const HAX_PAGE_SHIFT: u32 = 12;
pub const HAX_PAGE_MASK: u32 = 4095;
pub const HAX_MAX_MSR_ARRAY: u32 = 32;
pub const HAX_IO_OUT: u32 = 0;
pub const HAX_IO_IN: u32 = 1;
pub const HAX_PAGEFAULT_ACC_R: u32 = 1;
pub const HAX_PAGEFAULT_ACC_W: u32 = 2;
pub const HAX_PAGEFAULT_ACC_X: u32 = 4;
pub const HAX_PAGEFAULT_PERM_R: u32 = 16;
pub const HAX_PAGEFAULT_PERM_W: u32 = 32;
pub const HAX_PAGEFAULT_PERM_X: u32 = 64;
pub const HAX_CAP_STATUS_WORKING: u32 = 1;
pub const HAX_CAP_MEMQUOTA: u32 = 2;
pub const HAX_CAP_WORKSTATUS_MASK: u32 = 1;
pub const HAX_CAP_FAILREASON_VT: u32 = 1;
pub const HAX_CAP_FAILREASON_NX: u32 = 2;
pub const HAX_CAP_EPT: u32 = 1;
pub const HAX_CAP_FASTMMIO: u32 = 2;
pub const HAX_CAP_UG: u32 = 4;
pub const HAX_CAP_64BIT_RAMBLOCK: u32 = 8;
pub const HAX_CAP_64BIT_SETRAM: u32 = 16;
pub const HAX_CAP_TUNNEL_PAGE: u32 = 32;
pub const HAX_CAP_RAM_PROTECTION: u32 = 64;
pub const HAX_CAP_DEBUG: u32 = 128;
pub const HAX_CAP_IMPLICIT_RAMBLOCK: u32 = 256;
pub const HAX_CAP_CPUID: u32 = 512;
pub const HAX_CAP_VM_LOG: u32 = 1024;
pub const HAX_RAM_INFO_ROM: u32 = 1;
pub const HAX_RAM_INFO_STANDALONE: u32 = 64;
pub const HAX_RAM_INFO_INVALID: u32 = 128;
pub const HAX_RAM_PERM_NONE: u32 = 0;
pub const HAX_RAM_PERM_RWX: u32 = 7;
pub const HAX_RAM_PERM_MASK: u32 = 7;
pub const HAX_DEBUG_ENABLE: u32 = 1;
pub const HAX_DEBUG_STEP: u32 = 2;
pub const HAX_DEBUG_USE_SW_BP: u32 = 4;
pub const HAX_DEBUG_USE_HW_BP: u32 = 8;
pub const HAX_MAX_CPUID_ENTRIES: u32 = 64;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type hax_pa_t = u64;
pub type hax_pfn_t = u64;
pub type hax_paddr_t = u64;
pub type hax_vaddr_t = u64;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union interruptibility_state_t {
    pub raw: u32,
    pub __bindgen_anon_1: interruptibility_state_t__bindgen_ty_1,
    pub pad: u64,
    _bindgen_union_align: [u8; 8usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct interruptibility_state_t__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
}
#[test]
fn bindgen_test_layout_interruptibility_state_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<interruptibility_state_t__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(interruptibility_state_t__bindgen_ty_1)
        )
    );
}
impl interruptibility_state_t__bindgen_ty_1 {
    #[inline]
    pub fn sti_blocking(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sti_blocking(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn movss_blocking(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_movss_blocking(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn smi_blocking(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_smi_blocking(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nmi_blocking(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nmi_blocking(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sti_blocking: u32,
        movss_blocking: u32,
        smi_blocking: u32,
        nmi_blocking: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sti_blocking: u32 = unsafe { ::std::mem::transmute(sti_blocking) };
            sti_blocking as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let movss_blocking: u32 = unsafe { ::std::mem::transmute(movss_blocking) };
            movss_blocking as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let smi_blocking: u32 = unsafe { ::std::mem::transmute(smi_blocking) };
            smi_blocking as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let nmi_blocking: u32 = unsafe { ::std::mem::transmute(nmi_blocking) };
            nmi_blocking as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_interruptibility_state_t() {
    assert_eq!(
        ::std::mem::size_of::<interruptibility_state_t>(),
        8usize,
        concat!("Size of: ", stringify!(interruptibility_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<interruptibility_state_t>(),
        1usize,
        concat!("Alignment of ", stringify!(interruptibility_state_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interruptibility_state_t>())).raw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(interruptibility_state_t),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interruptibility_state_t>())).pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(interruptibility_state_t),
            "::",
            stringify!(pad)
        )
    );
}
impl Default for interruptibility_state_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct segment_desc_t {
    pub selector: u16,
    pub _dummy: u16,
    pub limit: u32,
    pub base: u64,
    pub __bindgen_anon_1: segment_desc_t__bindgen_ty_1,
    pub ipad: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union segment_desc_t__bindgen_ty_1 {
    pub __bindgen_anon_1: segment_desc_t__bindgen_ty_1__bindgen_ty_1,
    pub ar: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct segment_desc_t__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
}
#[test]
fn bindgen_test_layout_segment_desc_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<segment_desc_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(segment_desc_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
}
impl segment_desc_t__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn type_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn desc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_desc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dpl(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_dpl(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn available(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_available(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn long_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_long_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn operand_size(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_operand_size(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn granularity(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_granularity(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn null(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_null(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: u32,
        desc: u32,
        dpl: u32,
        present: u32,
        available: u32,
        long_mode: u32,
        operand_size: u32,
        granularity: u32,
        null: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let desc: u32 = unsafe { ::std::mem::transmute(desc) };
            desc as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let dpl: u32 = unsafe { ::std::mem::transmute(dpl) };
            dpl as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let present: u32 = unsafe { ::std::mem::transmute(present) };
            present as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let available: u32 = unsafe { ::std::mem::transmute(available) };
            available as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let long_mode: u32 = unsafe { ::std::mem::transmute(long_mode) };
            long_mode as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let operand_size: u32 = unsafe { ::std::mem::transmute(operand_size) };
            operand_size as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let granularity: u32 = unsafe { ::std::mem::transmute(granularity) };
            granularity as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let null: u32 = unsafe { ::std::mem::transmute(null) };
            null as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_segment_desc_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<segment_desc_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(segment_desc_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<segment_desc_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(segment_desc_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<segment_desc_t__bindgen_ty_1>())).ar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(segment_desc_t__bindgen_ty_1),
            "::",
            stringify!(ar)
        )
    );
}
impl Default for segment_desc_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_segment_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<segment_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(segment_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<segment_desc_t>(),
        1usize,
        concat!("Alignment of ", stringify!(segment_desc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<segment_desc_t>())).selector as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(segment_desc_t),
            "::",
            stringify!(selector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<segment_desc_t>()))._dummy as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(segment_desc_t),
            "::",
            stringify!(_dummy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<segment_desc_t>())).limit as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(segment_desc_t),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<segment_desc_t>())).base as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(segment_desc_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<segment_desc_t>())).ipad as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(segment_desc_t),
            "::",
            stringify!(ipad)
        )
    );
}
impl Default for segment_desc_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct vcpu_state_t {
    pub __bindgen_anon_1: vcpu_state_t__bindgen_ty_1,
    pub __bindgen_anon_2: vcpu_state_t__bindgen_ty_2,
    pub __bindgen_anon_3: vcpu_state_t__bindgen_ty_3,
    pub _cs: segment_desc_t,
    pub _ss: segment_desc_t,
    pub _ds: segment_desc_t,
    pub _es: segment_desc_t,
    pub _fs: segment_desc_t,
    pub _gs: segment_desc_t,
    pub _ldt: segment_desc_t,
    pub _tr: segment_desc_t,
    pub _gdt: segment_desc_t,
    pub _idt: segment_desc_t,
    pub _cr0: u64,
    pub _cr2: u64,
    pub _cr3: u64,
    pub _cr4: u64,
    pub _dr0: u64,
    pub _dr1: u64,
    pub _dr2: u64,
    pub _dr3: u64,
    pub _dr6: u64,
    pub _dr7: u64,
    pub _pde: u64,
    pub _efer: u32,
    pub _sysenter_cs: u32,
    pub _sysenter_eip: u64,
    pub _sysenter_esp: u64,
    pub _activity_state: u32,
    pub pad: u32,
    pub _interruptibility_state: interruptibility_state_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_state_t__bindgen_ty_1 {
    pub _regs: [u64; 16usize],
    pub __bindgen_anon_1: vcpu_state_t__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: [u64; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vcpu_state_t__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5,
    pub __bindgen_anon_6: vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6,
    pub __bindgen_anon_7: vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7,
    pub __bindgen_anon_8: vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8,
    pub _r8: u64,
    pub _r9: u64,
    pub _r10: u64,
    pub _r11: u64,
    pub _r12: u64,
    pub _r13: u64,
    pub _r14: u64,
    pub _r15: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub _ax: u16,
    pub _eax: u32,
    pub _rax: u64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub _al: u8,
    pub _ah: u8,
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(
        ),
        2usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(
        ),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
            >()))
            ._al as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_al)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
            >()))
            ._ah as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_ah)
        )
    );
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()))._ax
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_ax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()))._eax
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_eax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()))._rax
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_rax)
        )
    );
}
impl Default for vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub __bindgen_anon_1: vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub _cx: u16,
    pub _ecx: u32,
    pub _rcx: u64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub _cl: u8,
    pub _ch: u8,
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(
        ),
        2usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(
        ),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
            >()))
            ._cl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(_cl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
            >()))
            ._ch as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(_ch)
        )
    );
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>()))._cx
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(_cx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>()))._ecx
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(_ecx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>()))._rcx
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(_rcx)
        )
    );
}
impl Default for vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3 {
    pub __bindgen_anon_1: vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1,
    pub _dx: u16,
    pub _edx: u32,
    pub _rdx: u64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1 {
    pub _dl: u8,
    pub _dh: u8,
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1>(
        ),
        2usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1>(
        ),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1,
            >()))
            ._dl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(_dl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1,
            >()))
            ._dh as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(_dh)
        )
    );
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3>()))._dx
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_dx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3>()))._edx
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_edx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3>()))._rdx
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_rdx)
        )
    );
}
impl Default for vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4 {
    pub __bindgen_anon_1: vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    pub _bx: u16,
    pub _ebx: u32,
    pub _rbx: u64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1 {
    pub _bl: u8,
    pub _bh: u8,
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>(
        ),
        2usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>(
        ),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
            >()))
            ._bl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(_bl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
            >()))
            ._bh as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(_bh)
        )
    );
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4>()))._bx
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(_bx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4>()))._ebx
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(_ebx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4>()))._rbx
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(_rbx)
        )
    );
}
impl Default for vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5 {
    pub _sp: u16,
    pub _esp: u32,
    pub _rsp: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5>()))._sp
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_sp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5>()))._esp
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_esp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5>()))._rsp
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_rsp)
        )
    );
}
impl Default for vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_5 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6 {
    pub _bp: u16,
    pub _ebp: u32,
    pub _rbp: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6>()))._bp
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(_bp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6>()))._ebp
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(_ebp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6>()))._rbp
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(_rbp)
        )
    );
}
impl Default for vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_6 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7 {
    pub _si: u16,
    pub _esi: u32,
    pub _rsi: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7>()))._si
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_si)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7>()))._esi
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_esi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7>()))._rsi
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_rsi)
        )
    );
}
impl Default for vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_7 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8 {
    pub _di: u16,
    pub _edi: u32,
    pub _rdi: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8>()))._di
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(_di)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8>()))._edi
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(_edi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8>()))._rdi
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(_rdi)
        )
    );
}
impl Default for vcpu_state_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_8 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1>()))._r8 as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_r8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1>()))._r9 as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_r9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1>()))._r10 as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_r10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1>()))._r11 as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_r11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1>()))._r12 as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_r12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1>()))._r13 as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_r13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1>()))._r14 as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_r14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1__bindgen_ty_1>()))._r15 as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_r15)
        )
    );
}
impl Default for vcpu_state_t__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(vcpu_state_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_state_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_1>()))._regs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_1),
            "::",
            stringify!(_regs)
        )
    );
}
impl Default for vcpu_state_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_state_t__bindgen_ty_2 {
    pub _eip: u32,
    pub _rip: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_state_t__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_state_t__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_2>()))._eip as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_2),
            "::",
            stringify!(_eip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_2>()))._rip as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_2),
            "::",
            stringify!(_rip)
        )
    );
}
impl Default for vcpu_state_t__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_state_t__bindgen_ty_3 {
    pub _eflags: u32,
    pub _rflags: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_vcpu_state_t__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_state_t__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_state_t__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_3>()))._eflags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_3),
            "::",
            stringify!(_eflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t__bindgen_ty_3>()))._rflags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t__bindgen_ty_3),
            "::",
            stringify!(_rflags)
        )
    );
}
impl Default for vcpu_state_t__bindgen_ty_3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_vcpu_state_t() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_state_t>(),
        512usize,
        concat!("Size of: ", stringify!(vcpu_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_state_t>(),
        1usize,
        concat!("Alignment of ", stringify!(vcpu_state_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._cs as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._ss as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._ds as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_ds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._es as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._fs as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._gs as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_gs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._ldt as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_ldt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._tr as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_tr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._gdt as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_gdt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._idt as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_idt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._cr0 as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_cr0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._cr2 as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_cr2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._cr3 as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_cr3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._cr4 as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_cr4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._dr0 as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_dr0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._dr1 as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_dr1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._dr2 as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_dr2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._dr3 as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_dr3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._dr6 as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_dr6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._dr7 as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_dr7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._pde as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_pde)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._efer as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_efer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._sysenter_cs as *const _ as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_sysenter_cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._sysenter_eip as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_sysenter_eip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._sysenter_esp as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_sysenter_esp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>()))._activity_state as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_activity_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_state_t>())).pad as *const _ as usize },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_state_t>()))._interruptibility_state as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_state_t),
            "::",
            stringify!(_interruptibility_state)
        )
    );
}
impl Default for vcpu_state_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn dump();
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vmx_msr {
    pub entry: u64,
    pub value: u64,
}
#[test]
fn bindgen_test_layout_vmx_msr() {
    assert_eq!(
        ::std::mem::size_of::<vmx_msr>(),
        16usize,
        concat!("Size of: ", stringify!(vmx_msr))
    );
    assert_eq!(
        ::std::mem::align_of::<vmx_msr>(),
        1usize,
        concat!("Alignment of ", stringify!(vmx_msr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vmx_msr>())).entry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vmx_msr),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vmx_msr>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vmx_msr),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct fx_layout {
    pub fcw: u16,
    pub fsw: u16,
    pub ftw: u8,
    pub res1: u8,
    pub fop: u16,
    pub __bindgen_anon_1: fx_layout__bindgen_ty_1,
    pub __bindgen_anon_2: fx_layout__bindgen_ty_2,
    pub mxcsr: u32,
    pub mxcsr_mask: u32,
    pub st_mm: [[u8; 16usize]; 8usize],
    pub mmx_1: [[u8; 16usize]; 8usize],
    pub mmx_2: [[u8; 16usize]; 8usize],
    pub pad: [u8; 96usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fx_layout__bindgen_ty_1 {
    pub __bindgen_anon_1: fx_layout__bindgen_ty_1__bindgen_ty_1,
    pub fpu_ip: u64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fx_layout__bindgen_ty_1__bindgen_ty_1 {
    pub fip: u32,
    pub fcs: u16,
    pub res2: u16,
}
#[test]
fn bindgen_test_layout_fx_layout__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<fx_layout__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(fx_layout__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<fx_layout__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(fx_layout__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fx_layout__bindgen_ty_1__bindgen_ty_1>())).fip as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(fip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fx_layout__bindgen_ty_1__bindgen_ty_1>())).fcs as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(fcs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fx_layout__bindgen_ty_1__bindgen_ty_1>())).res2 as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(res2)
        )
    );
}
#[test]
fn bindgen_test_layout_fx_layout__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<fx_layout__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(fx_layout__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<fx_layout__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(fx_layout__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout__bindgen_ty_1>())).fpu_ip as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout__bindgen_ty_1),
            "::",
            stringify!(fpu_ip)
        )
    );
}
impl Default for fx_layout__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fx_layout__bindgen_ty_2 {
    pub __bindgen_anon_1: fx_layout__bindgen_ty_2__bindgen_ty_1,
    pub fpu_dp: u64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fx_layout__bindgen_ty_2__bindgen_ty_1 {
    pub fdp: u32,
    pub fds: u16,
    pub res3: u16,
}
#[test]
fn bindgen_test_layout_fx_layout__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<fx_layout__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(fx_layout__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<fx_layout__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(fx_layout__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fx_layout__bindgen_ty_2__bindgen_ty_1>())).fdp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(fdp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fx_layout__bindgen_ty_2__bindgen_ty_1>())).fds as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(fds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fx_layout__bindgen_ty_2__bindgen_ty_1>())).res3 as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(res3)
        )
    );
}
#[test]
fn bindgen_test_layout_fx_layout__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<fx_layout__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(fx_layout__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<fx_layout__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(fx_layout__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout__bindgen_ty_2>())).fpu_dp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout__bindgen_ty_2),
            "::",
            stringify!(fpu_dp)
        )
    );
}
impl Default for fx_layout__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_fx_layout() {
    assert_eq!(
        ::std::mem::size_of::<fx_layout>(),
        512usize,
        concat!("Size of: ", stringify!(fx_layout))
    );
    assert_eq!(
        ::std::mem::align_of::<fx_layout>(),
        16usize,
        concat!("Alignment of ", stringify!(fx_layout))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout>())).fcw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout),
            "::",
            stringify!(fcw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout>())).fsw as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout),
            "::",
            stringify!(fsw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout>())).ftw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout>())).res1 as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout),
            "::",
            stringify!(res1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout>())).fop as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout>())).mxcsr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout>())).mxcsr_mask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout),
            "::",
            stringify!(mxcsr_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout>())).st_mm as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout),
            "::",
            stringify!(st_mm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout>())).mmx_1 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout),
            "::",
            stringify!(mmx_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout>())).mmx_2 as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout),
            "::",
            stringify!(mmx_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fx_layout>())).pad as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(fx_layout),
            "::",
            stringify!(pad)
        )
    );
}
impl Default for fx_layout {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_msr_data {
    pub nr_msr: u16,
    pub done: u16,
    pub pad: [u16; 2usize],
    pub entries: [vmx_msr; 32usize],
}
#[test]
fn bindgen_test_layout_hax_msr_data() {
    assert_eq!(
        ::std::mem::size_of::<hax_msr_data>(),
        520usize,
        concat!("Size of: ", stringify!(hax_msr_data))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_msr_data>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_msr_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_msr_data>())).nr_msr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_msr_data),
            "::",
            stringify!(nr_msr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_msr_data>())).done as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_msr_data),
            "::",
            stringify!(done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_msr_data>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_msr_data),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_msr_data>())).entries as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_msr_data),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct hax_tunnel {
    pub _exit_reason: u32,
    pub pad0: u32,
    pub _exit_status: u32,
    pub user_event_pending: u32,
    pub ready_for_interrupt_injection: ::std::os::raw::c_int,
    pub request_interrupt_window: ::std::os::raw::c_int,
    pub __bindgen_anon_1: hax_tunnel__bindgen_ty_1,
    pub apic_base: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hax_tunnel__bindgen_ty_1 {
    pub io: hax_tunnel__bindgen_ty_1__bindgen_ty_1,
    pub mmio: hax_tunnel__bindgen_ty_1__bindgen_ty_2,
    pub pagefault: hax_tunnel__bindgen_ty_1__bindgen_ty_3,
    pub state: hax_tunnel__bindgen_ty_1__bindgen_ty_4,
    pub debug: hax_tunnel__bindgen_ty_1__bindgen_ty_5,
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_tunnel__bindgen_ty_1__bindgen_ty_1 {
    pub _direction: u8,
    pub _df: u8,
    pub _size: u16,
    pub _port: u16,
    pub _count: u16,
    pub _flags: u8,
    pub _pad0: u8,
    pub _pad1: u16,
    pub _pad2: u32,
    pub _vaddr: hax_vaddr_t,
}
#[test]
fn bindgen_test_layout_hax_tunnel__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hax_tunnel__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<hax_tunnel__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_1>()))._direction
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_1>()))._df as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_df)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_1>()))._size as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_1>()))._port as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_1>()))._count as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_1>()))._flags as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_1>()))._pad0 as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_pad0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_1>()))._pad1 as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_1>()))._pad2 as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_1>()))._vaddr as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_vaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_tunnel__bindgen_ty_1__bindgen_ty_2 {
    pub gla: hax_paddr_t,
}
#[test]
fn bindgen_test_layout_hax_tunnel__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<hax_tunnel__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<hax_tunnel__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_2>())).gla as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(gla)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_tunnel__bindgen_ty_1__bindgen_ty_3 {
    pub gpa: hax_paddr_t,
    pub flags: u32,
    pub reserved1: u32,
    pub reserved2: u64,
}
#[test]
fn bindgen_test_layout_hax_tunnel__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<hax_tunnel__bindgen_ty_1__bindgen_ty_3>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<hax_tunnel__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_3>())).gpa as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(gpa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_3>())).flags as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_3>())).reserved1 as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_3>())).reserved2 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(reserved2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_tunnel__bindgen_ty_1__bindgen_ty_4 {
    pub dummy: hax_paddr_t,
}
#[test]
fn bindgen_test_layout_hax_tunnel__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<hax_tunnel__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<hax_tunnel__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_4>())).dummy as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_tunnel__bindgen_ty_1__bindgen_ty_5 {
    pub rip: u64,
    pub dr6: u64,
    pub dr7: u64,
}
#[test]
fn bindgen_test_layout_hax_tunnel__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<hax_tunnel__bindgen_ty_1__bindgen_ty_5>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<hax_tunnel__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_5>())).rip as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_5>())).dr6 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1__bindgen_ty_5>())).dr7 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(dr7)
        )
    );
}
#[test]
fn bindgen_test_layout_hax_tunnel__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hax_tunnel__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(hax_tunnel__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_tunnel__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(hax_tunnel__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1>())).io as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1),
            "::",
            stringify!(io)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1>())).mmio as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1),
            "::",
            stringify!(mmio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1>())).pagefault as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1),
            "::",
            stringify!(pagefault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel__bindgen_ty_1>())).debug as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel__bindgen_ty_1),
            "::",
            stringify!(debug)
        )
    );
}
impl Default for hax_tunnel__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_hax_tunnel() {
    assert_eq!(
        ::std::mem::size_of::<hax_tunnel>(),
        56usize,
        concat!("Size of: ", stringify!(hax_tunnel))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_tunnel>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_tunnel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel>()))._exit_reason as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel),
            "::",
            stringify!(_exit_reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel>())).pad0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel),
            "::",
            stringify!(pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel>()))._exit_status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel),
            "::",
            stringify!(_exit_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel>())).user_event_pending as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel),
            "::",
            stringify!(user_event_pending)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel>())).ready_for_interrupt_injection as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel),
            "::",
            stringify!(ready_for_interrupt_injection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_tunnel>())).request_interrupt_window as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel),
            "::",
            stringify!(request_interrupt_window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel>())).apic_base as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel),
            "::",
            stringify!(apic_base)
        )
    );
}
impl Default for hax_tunnel {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct hax_fastmmio {
    pub gpa: hax_paddr_t,
    pub __bindgen_anon_1: hax_fastmmio__bindgen_ty_1,
    pub size: u8,
    pub direction: u8,
    pub reg_index: u16,
    pub pad0: u32,
    pub _cr0: u64,
    pub _cr2: u64,
    pub _cr3: u64,
    pub _cr4: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hax_fastmmio__bindgen_ty_1 {
    pub value: u64,
    pub gpa2: hax_paddr_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_hax_fastmmio__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hax_fastmmio__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(hax_fastmmio__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_fastmmio__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(hax_fastmmio__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_fastmmio__bindgen_ty_1>())).value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_fastmmio__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_fastmmio__bindgen_ty_1>())).gpa2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_fastmmio__bindgen_ty_1),
            "::",
            stringify!(gpa2)
        )
    );
}
impl Default for hax_fastmmio__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_hax_fastmmio() {
    assert_eq!(
        ::std::mem::size_of::<hax_fastmmio>(),
        56usize,
        concat!("Size of: ", stringify!(hax_fastmmio))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_fastmmio>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_fastmmio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_fastmmio>())).gpa as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_fastmmio),
            "::",
            stringify!(gpa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_fastmmio>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_fastmmio),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_fastmmio>())).direction as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_fastmmio),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_fastmmio>())).reg_index as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_fastmmio),
            "::",
            stringify!(reg_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_fastmmio>())).pad0 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_fastmmio),
            "::",
            stringify!(pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_fastmmio>()))._cr0 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_fastmmio),
            "::",
            stringify!(_cr0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_fastmmio>()))._cr2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_fastmmio),
            "::",
            stringify!(_cr2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_fastmmio>()))._cr3 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_fastmmio),
            "::",
            stringify!(_cr3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_fastmmio>()))._cr4 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_fastmmio),
            "::",
            stringify!(_cr4)
        )
    );
}
impl Default for hax_fastmmio {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_module_version {
    pub compat_version: u32,
    pub cur_version: u32,
}
#[test]
fn bindgen_test_layout_hax_module_version() {
    assert_eq!(
        ::std::mem::size_of::<hax_module_version>(),
        8usize,
        concat!("Size of: ", stringify!(hax_module_version))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_module_version>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_module_version))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_module_version>())).compat_version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_module_version),
            "::",
            stringify!(compat_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_module_version>())).cur_version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_module_version),
            "::",
            stringify!(cur_version)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_capabilityinfo {
    pub wstatus: u16,
    pub winfo: u16,
    pub win_refcount: u32,
    pub mem_quota: u64,
}
#[test]
fn bindgen_test_layout_hax_capabilityinfo() {
    assert_eq!(
        ::std::mem::size_of::<hax_capabilityinfo>(),
        16usize,
        concat!("Size of: ", stringify!(hax_capabilityinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_capabilityinfo>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_capabilityinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_capabilityinfo>())).wstatus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_capabilityinfo),
            "::",
            stringify!(wstatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_capabilityinfo>())).winfo as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_capabilityinfo),
            "::",
            stringify!(winfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_capabilityinfo>())).win_refcount as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_capabilityinfo),
            "::",
            stringify!(win_refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_capabilityinfo>())).mem_quota as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_capabilityinfo),
            "::",
            stringify!(mem_quota)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_tunnel_info {
    pub va: u64,
    pub io_va: u64,
    pub size: u16,
    pub pad: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_hax_tunnel_info() {
    assert_eq!(
        ::std::mem::size_of::<hax_tunnel_info>(),
        24usize,
        concat!("Size of: ", stringify!(hax_tunnel_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_tunnel_info>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_tunnel_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel_info>())).va as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel_info),
            "::",
            stringify!(va)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel_info>())).io_va as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel_info),
            "::",
            stringify!(io_va)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel_info>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_tunnel_info>())).pad as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_tunnel_info),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_set_memlimit {
    pub enable_memlimit: u8,
    pub pad: [u8; 7usize],
    pub memory_limit: u64,
}
#[test]
fn bindgen_test_layout_hax_set_memlimit() {
    assert_eq!(
        ::std::mem::size_of::<hax_set_memlimit>(),
        16usize,
        concat!("Size of: ", stringify!(hax_set_memlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_set_memlimit>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_set_memlimit))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hax_set_memlimit>())).enable_memlimit as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_memlimit),
            "::",
            stringify!(enable_memlimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_memlimit>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_memlimit),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_memlimit>())).memory_limit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_memlimit),
            "::",
            stringify!(memory_limit)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_alloc_ram_info {
    pub size: u32,
    pub pad: u32,
    pub va: u64,
}
#[test]
fn bindgen_test_layout_hax_alloc_ram_info() {
    assert_eq!(
        ::std::mem::size_of::<hax_alloc_ram_info>(),
        16usize,
        concat!("Size of: ", stringify!(hax_alloc_ram_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_alloc_ram_info>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_alloc_ram_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_alloc_ram_info>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_alloc_ram_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_alloc_ram_info>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_alloc_ram_info),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_alloc_ram_info>())).va as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_alloc_ram_info),
            "::",
            stringify!(va)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_ramblock_info {
    pub start_va: u64,
    pub size: u64,
    pub reserved: u64,
}
#[test]
fn bindgen_test_layout_hax_ramblock_info() {
    assert_eq!(
        ::std::mem::size_of::<hax_ramblock_info>(),
        24usize,
        concat!("Size of: ", stringify!(hax_ramblock_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_ramblock_info>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_ramblock_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_ramblock_info>())).start_va as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_ramblock_info),
            "::",
            stringify!(start_va)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_ramblock_info>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_ramblock_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_ramblock_info>())).reserved as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_ramblock_info),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_set_ram_info {
    pub pa_start: u64,
    pub size: u32,
    pub flags: u8,
    pub pad: [u8; 3usize],
    pub va: u64,
}
#[test]
fn bindgen_test_layout_hax_set_ram_info() {
    assert_eq!(
        ::std::mem::size_of::<hax_set_ram_info>(),
        24usize,
        concat!("Size of: ", stringify!(hax_set_ram_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_set_ram_info>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_set_ram_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_ram_info>())).pa_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_ram_info),
            "::",
            stringify!(pa_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_ram_info>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_ram_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_ram_info>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_ram_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_ram_info>())).pad as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_ram_info),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_ram_info>())).va as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_ram_info),
            "::",
            stringify!(va)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_set_ram_info2 {
    pub pa_start: u64,
    pub size: u64,
    pub va: u64,
    pub flags: u32,
    pub reserved1: u32,
    pub reserved2: u64,
}
#[test]
fn bindgen_test_layout_hax_set_ram_info2() {
    assert_eq!(
        ::std::mem::size_of::<hax_set_ram_info2>(),
        40usize,
        concat!("Size of: ", stringify!(hax_set_ram_info2))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_set_ram_info2>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_set_ram_info2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_ram_info2>())).pa_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_ram_info2),
            "::",
            stringify!(pa_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_ram_info2>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_ram_info2),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_ram_info2>())).va as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_ram_info2),
            "::",
            stringify!(va)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_ram_info2>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_ram_info2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_ram_info2>())).reserved1 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_ram_info2),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_set_ram_info2>())).reserved2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_set_ram_info2),
            "::",
            stringify!(reserved2)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_protect_ram_info {
    pub pa_start: u64,
    pub size: u64,
    pub flags: u32,
    pub reserved: u32,
}
#[test]
fn bindgen_test_layout_hax_protect_ram_info() {
    assert_eq!(
        ::std::mem::size_of::<hax_protect_ram_info>(),
        24usize,
        concat!("Size of: ", stringify!(hax_protect_ram_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_protect_ram_info>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_protect_ram_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_protect_ram_info>())).pa_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_protect_ram_info),
            "::",
            stringify!(pa_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_protect_ram_info>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_protect_ram_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_protect_ram_info>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_protect_ram_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_protect_ram_info>())).reserved as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_protect_ram_info),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_qemu_version {
    pub cur_version: u32,
    pub least_version: u32,
}
#[test]
fn bindgen_test_layout_hax_qemu_version() {
    assert_eq!(
        ::std::mem::size_of::<hax_qemu_version>(),
        8usize,
        concat!("Size of: ", stringify!(hax_qemu_version))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_qemu_version>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_qemu_version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_qemu_version>())).cur_version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_qemu_version),
            "::",
            stringify!(cur_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_qemu_version>())).least_version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_qemu_version),
            "::",
            stringify!(least_version)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_debug_t {
    pub control: u32,
    pub reserved: u32,
    pub dr: [u64; 8usize],
}
#[test]
fn bindgen_test_layout_hax_debug_t() {
    assert_eq!(
        ::std::mem::size_of::<hax_debug_t>(),
        72usize,
        concat!("Size of: ", stringify!(hax_debug_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_debug_t>(),
        1usize,
        concat!("Alignment of ", stringify!(hax_debug_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_debug_t>())).control as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_debug_t),
            "::",
            stringify!(control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_debug_t>())).reserved as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_debug_t),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_debug_t>())).dr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_debug_t),
            "::",
            stringify!(dr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hax_cpuid_entry {
    pub function: u32,
    pub index: u32,
    pub flags: u32,
    pub eax: u32,
    pub ebx: u32,
    pub ecx: u32,
    pub edx: u32,
    pub pad: [u32; 3usize],
}
#[test]
fn bindgen_test_layout_hax_cpuid_entry() {
    assert_eq!(
        ::std::mem::size_of::<hax_cpuid_entry>(),
        40usize,
        concat!("Size of: ", stringify!(hax_cpuid_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_cpuid_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(hax_cpuid_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_cpuid_entry>())).function as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_cpuid_entry),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_cpuid_entry>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_cpuid_entry),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_cpuid_entry>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_cpuid_entry),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_cpuid_entry>())).eax as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_cpuid_entry),
            "::",
            stringify!(eax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_cpuid_entry>())).ebx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_cpuid_entry),
            "::",
            stringify!(ebx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_cpuid_entry>())).ecx as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_cpuid_entry),
            "::",
            stringify!(ecx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_cpuid_entry>())).edx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_cpuid_entry),
            "::",
            stringify!(edx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_cpuid_entry>())).pad as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_cpuid_entry),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct hax_cpuid {
    pub total: u32,
    pub pad: u32,
    pub entries: __IncompleteArrayField<hax_cpuid_entry>,
}
#[test]
fn bindgen_test_layout_hax_cpuid() {
    assert_eq!(
        ::std::mem::size_of::<hax_cpuid>(),
        8usize,
        concat!("Size of: ", stringify!(hax_cpuid))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_cpuid>(),
        4usize,
        concat!("Alignment of ", stringify!(hax_cpuid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_cpuid>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_cpuid),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_cpuid>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_cpuid),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_cpuid>())).entries as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_cpuid),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hax_log_file {
    pub path: [wchar_t; 2048usize],
}
#[test]
fn bindgen_test_layout_hax_log_file() {
    assert_eq!(
        ::std::mem::size_of::<hax_log_file>(),
        4096usize,
        concat!("Size of: ", stringify!(hax_log_file))
    );
    assert_eq!(
        ::std::mem::align_of::<hax_log_file>(),
        2usize,
        concat!("Alignment of ", stringify!(hax_log_file))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hax_log_file>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hax_log_file),
            "::",
            stringify!(path)
        )
    );
}
impl Default for hax_log_file {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
