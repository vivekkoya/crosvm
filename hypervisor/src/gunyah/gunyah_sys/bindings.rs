/* automatically generated by tools/bindgen-all-the-things */

#![allow(clippy::missing_safety_doc)]
#![allow(clippy::undocumented_unsafe_blocks)]
#![allow(clippy::upper_case_acronyms)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

pub const GH_IOCTL_TYPE: u8 = 71u8;
pub const GH_MEM_ALLOW_READ: u32 = 1;
pub const GH_MEM_ALLOW_WRITE: u32 = 2;
pub const GH_MEM_ALLOW_EXEC: u32 = 4;
pub const GH_FN_VCPU: u32 = 1;
pub const GH_FN_IRQFD: u32 = 2;
pub const GH_FN_IOEVENTFD: u32 = 3;
pub const GH_FN_MAX_ARG_SIZE: u32 = 256;
pub const GH_IRQFD_LEVEL: u32 = 1;
pub const GH_IOEVENTFD_DATAMATCH: u32 = 1;
pub const GH_VM_MAX_EXIT_REASON_SIZE: u32 = 8;
pub const GH_VCPU_EXIT_UNKNOWN: u32 = 0;
pub const GH_VCPU_EXIT_MMIO: u32 = 1;
pub const GH_VCPU_EXIT_STATUS: u32 = 2;
pub const GH_ANDROID_IOCTL_TYPE: u8 = 65u8;
pub type __le16 = u16;
pub type __be16 = u16;
pub type __le32 = u32;
pub type __be32 = u32;
pub type __le64 = u64;
pub type __be64 = u64;
pub type __sum16 = u16;
pub type __wsum = u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_userspace_memory_region {
    pub label: u32,
    pub flags: u32,
    pub guest_phys_addr: u64,
    pub memory_size: u64,
    pub userspace_addr: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_vm_dtb_config {
    pub guest_phys_addr: u64,
    pub size: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_fn_vcpu_arg {
    pub id: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_fn_irqfd_arg {
    pub fd: u32,
    pub label: u32,
    pub flags: u32,
    pub padding: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_fn_ioeventfd_arg {
    pub datamatch: u64,
    pub addr: u64,
    pub len: u32,
    pub fd: i32,
    pub flags: u32,
    pub padding: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_fn_desc {
    pub type_: u32,
    pub arg_size: u32,
    pub arg: u64,
}
pub const GH_VM_STATUS_GH_VM_STATUS_LOAD_FAILED: gh_vm_status = 1;
pub const GH_VM_STATUS_GH_VM_STATUS_EXITED: gh_vm_status = 2;
pub const GH_VM_STATUS_GH_VM_STATUS_CRASHED: gh_vm_status = 3;
pub type gh_vm_status = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_vm_exit_info {
    pub type_: u16,
    pub padding: u16,
    pub reason_size: u32,
    pub reason: [u8; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gh_vcpu_run {
    pub immediate_exit: u8,
    pub padding: [u8; 7usize],
    pub exit_reason: u32,
    pub __bindgen_anon_1: gh_vcpu_run__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gh_vcpu_run__bindgen_ty_1 {
    pub mmio: gh_vcpu_run__bindgen_ty_1__bindgen_ty_1,
    pub status: gh_vcpu_run__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_vcpu_run__bindgen_ty_1__bindgen_ty_1 {
    pub phys_addr: u64,
    pub data: [u8; 8usize],
    pub len: u32,
    pub is_write: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gh_vcpu_run__bindgen_ty_1__bindgen_ty_2 {
    pub status: gh_vm_status,
    pub exit_info: gh_vm_exit_info,
}
impl Default for gh_vcpu_run__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for gh_vcpu_run__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for gh_vcpu_run {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_vm_firmware_config {
    pub guest_phys_addr: u64,
    pub size: u64,
}
